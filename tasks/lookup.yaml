---
# Lookup tasks file for ansible-role-redcloak

- name: "Check for SecureWorks install directory"
  ansible.builtin.stat:
    path: /opt/secureworks
  register: result
  ignore_errors: true

- name: "Set Facts for SecureWorks install directory"
  ansible.builtin.set_fact:
    secureworks_home: /opt/secureworks
  when:
    - result.stat.exists
    - result.stat.isdir
    - result.failed is false

- name: "Set Facts for Install variable"
  ansible.builtin.set_fact:
    install: true
  when:
    - secureworks_home is not defined

- name: "Read Version from existing installed version of redcloak"
  ansible.builtin.shell:
    cmd: "./redcloak --check | grep -i 'version:' | head -n 1 | cut -d ':' -f 2"
    chdir: "{{ secureworks_home }}/redcloak/bin/"
  register: result
  when:
    - secureworks_home is defined

- name: "Version"
  debug:
    var: result.stdout
  when:
    - result is defined
    - result.failed is false

#- name: "Check for Managesoft config directory"
#  ansible.builtin.stat:
#    path: /var/opt/managesoft
#  register: result
#  ignore_errors: true

#- name: "Set Facts for Managesoft config directory"
#  ansible.builtin.set_fact:
#    managesoft_config_dir: /var/opt/managesoft
#  when:
#    - result.stat.exists
#    - result.stat.isdir
#    - result.failed is false

#- name: "Collect fingerprint of the Managesoft Certificate"
#  ansible.builtin.shell:
#    cmd: openssl x509 -noout -fingerprint -sha256 -inform pem -in '{{ managesoft_config_dir }}/etc/ssl/cert.pem'
#  register: result
#  when:
#    - managesoft_home is defined

#- name: "Set Facts for Managesoft Certificate fingerprint"
#  ansible.builtin.set_fact:
#    certificate: "{{ result.stdout | split('=') | last }}"
#  when:
#    - result.failed is false

#- name: "Download Flexera Certificate file to /tmp"
#  ansible.builtin.get_url:
#    url: "{{ software_url }}/{{ cert_file }}"
#    dest: "/tmp/"
#    validate_certs: no
#    mode: '0774'
#  when:
#    - managesoft_home is defined

#- name: "Collect fingerprint of the latest Managesoft Certificate"
#  ansible.builtin.shell:
#    cmd: openssl x509 -noout -fingerprint -sha256 -inform pem -in '/tmp/{{ cert_file }}'
#  register: result
#  when:
#    - managesoft_home is defined

#- name: "Set Facts for latest Managesoft Certificate fingerprint"
#  ansible.builtin.set_fact:
#    certificate_latest: "{{ result.stdout | split('=') | last }}"
#  when:
#    - result.failed is false

#- name: "Set Facts for Cert_Replace variable"
#  ansible.builtin.set_fact:
#    cert_replace: true
#  when:
#    - certificate is defined
#    - certificate_latest is defined
#    - certificate != certificate_latest

#- name: "Check for Managesoft Configuration INI File"
#  ansible.builtin.stat:
#    path: "{{ managesoft_config_dir }}/etc/config.ini"
#  register: result
#  when:
#    - managesoft_config_dir is defined

#- name: "Set Facts for Managesoft Configuration INI File"
#  ansible.builtin.set_fact:
#    config_file: "{{ managesoft_config_dir }}/etc/config.ini"
#  when:
#    - managesoft_config_dir is defined
#    - result.stat.exists
#    - result.failed is false

#- name: "Read from Managesoft Configuration INI File"
#  ansible.builtin.shell:
#    cmd: "cat {{ config_file }} | grep -iP 'ETCPVersion='"
#  register: result
#  when:
#    - config_file is defined

#- name: "Get the version of installed Flexera Inventory Agent"
#  debug:
#    var: result.stdout
#  when:
#    - result is defined
#    - result.failed is false

#- name: "Set Facts for Flexera Inventory Agent Installed Version"
#  ansible.builtin.set_fact:
#    installed_version: "{{ result.stdout | split('=') | last }}"
#  when:
#    - result is defined
#    - result.failed is false

#- name: "Set Facts for Upgrade variable"
#  ansible.builtin.set_fact:
#    upgrade: true
#  when:
#    - installed_version is defined
#    - installed_version != package_version
    #- splunk_version != '7'
